# =================================================================
# GitHub Actions CI Workflow for Anycall Backend
# =================================================================

# 워크플로우의 이름을 지정합니다. GitHub Actions 탭에 이 이름이 표시됩니다.
name: Anycall Backend CI

# 워크플로우가 언제 실행될지를 정의합니다.
on:
  # 'main' 또는 'develop' 브랜치로 push 이벤트가 발생했을 때 실행됩니다.
  push:
    branches: [ "main", "develop" ]
  # 'main' 또는 'develop' 브랜치로 pull request가 생성되었을 때도 실행됩니다.
  pull_request:
    branches: [ "main" ]

# 워크플로우에서 실행될 실제 작업(Job)들을 정의합니다.
jobs:
  # 'build'라는 이름의 작업을 정의합니다.
  build:
    # 이 작업이 실행될 가상 환경을 지정합니다. 최신 우분투(Linux) 환경을 사용합니다.
    runs-on: ubuntu-latest

    # 작업 내에서 실행될 단계(Step)들을 순서대로 정의합니다.
    steps:
      # 1. 소스 코드 체크아웃
      # actions/checkout@v3는 GitHub Actions에서 제공하는 공식 액션으로,
      # 현재 레포지토리의 소스 코드를 가상 환경으로 가져옵니다.
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 25 설치
      # 우리 프로젝트는 Java 25를 사용하므로, 가상 환경에 JDK 25를 설치합니다.
      # actions/setup-java@v3 액션을 사용하고, 'java-version'을 '25'로 지정합니다.
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 부여
      # Linux 환경에서는 gradlew 파일에 실행 권한이 필요합니다.
      # chmod +x 명령어로 실행 권한을 추가합니다.
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # 4. Gradle로 프로젝트 빌드
      # ./gradlew build 명령을 실행하여 프로젝트를 빌드하고 테스트를 실행합니다.
      # 이 단계가 성공적으로 끝나면 코드가 문제없이 컴파일되고 모든 테스트를 통과했다는 의미입니다.
      - name: Build with Gradle
        run: ./gradlew build